name: Rust

on:
  push:
    branches: [ main, ci, arm ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-x86_64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # For some reason, native musl toolchain (apt musl-tools) doesn't work
    # (produce binaries that just segfault/crash with "no such file")
    - name: Build tools setup
      run: >
        rustup target add x86_64-unknown-linux-musl &&
        wget https://more.musl.cc/x86_64-linux-musl/x86_64-linux-musl-cross.tgz -O /tmp/musl.tgz &&
        (
          cd ~/ &&
          tar xf /tmp/musl.tgz &&
          cd x86_64-linux-musl-cross &&
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=$(pwd)/bin/x86_64-linux-musl-cc" >> $GITHUB_ENV &&
          echo "CC_x86_64_unknown_linux_musl=$(pwd)/bin/x86_64-linux-musl-cc" >> $GITHUB_ENV
        ) &&
        export $(cat "$GITHUB_ENV")

    - name: Compile
      run: cargo build --verbose --release --target x86_64-unknown-linux-musl

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: x86_64-linux-musl
        path: |
          target/x86_64-unknown-linux-musl/release/modus
          target/x86_64-unknown-linux-musl/release/buildkit-frontend


  build-aarch64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Build tools setup
      run: >
        rustup target add aarch64-unknown-linux-musl &&
        wget https://more.musl.cc/x86_64-linux-musl/aarch64-linux-musl-cross.tgz -O /tmp/musl.tgz &&
        (
          cd ~/ &&
          tar xf /tmp/musl.tgz &&
          cd aarch64-linux-musl-cross &&
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=$(pwd)/bin/aarch64-linux-musl-cc" >> $GITHUB_ENV &&
          echo "CC_aarch64_unknown_linux_musl=$(pwd)/bin/aarch64-linux-musl-cc" >> $GITHUB_ENV
        ) &&
        export $(cat "$GITHUB_ENV")

    - name: Compile
      run: cargo build --verbose --release --target aarch64-unknown-linux-musl

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: aarch64-linux-musl
        path: |
          target/aarch64-unknown-linux-musl/release/modus
          target/aarch64-unknown-linux-musl/release/buildkit-frontend

  debug-build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Debug Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: debug-build
        path: target/debug/modus


  build-image-and-test:
    runs-on: ubuntu-latest
    needs: [ build-x86_64, build-aarch64, debug-build-and-test ]

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Download previously built binaries
      uses: actions/download-artifact@v3

    - run: |
        set -e;
        for name in *-linux-musl; do
          chmod +x "$name/modus" "$name/buildkit-frontend";
          cp "$name/modus" "modus-$name";
        done;
        chmod +x debug-build/modus;

    - name: Quick smoke check
      run: |
        set -xe;
        ./x86_64-linux-musl/modus --version;
        ./debug-build/modus --version;

    - name: Upload modus binaries for all arch
      uses: actions/upload-artifact@v3
      with:
        name: modus-all
        path: |
          modus-*-linux-*

    - name: Generate frontend image
      run: |
        set -e;
        mkdir /tmp/frontend;
        DOCKERFILE="/tmp/frontend/Dockerfile";
        echo 'FROM alpine' >> $DOCKERFILE;
        echo 'ARG TARGETARCH' >> $DOCKERFILE;
        echo 'COPY "$TARGETARCH" "buildkit-frontend"' >> $DOCKERFILE;
        echo 'ENTRYPOINT ["/buildkit-frontend"]' >> $DOCKERFILE;
        cp aarch64-linux-musl/buildkit-frontend /tmp/frontend/arm64;
        cp x86_64-linux-musl/buildkit-frontend /tmp/frontend/amd64;
        cd /tmp/frontend;
        echo "SHORT_SHA=$(echo $GITHUB_SHA | head -c 10)" >> $GITHUB_ENV;
        echo "IMAGE_BASE=ghcr.io/$GITHUB_REPOSITORY-buildkit-frontend" >> $GITHUB_ENV;
        export $(cat "$GITHUB_ENV");
        echo "IMAGE_REF=$IMAGE_BASE:$SHORT_SHA" >> $GITHUB_ENV;
        export $(cat "$GITHUB_ENV");
        echo Image: $IMAGE_REF;
        cat $DOCKERFILE;
        docker buildx build --platform linux/amd64 . -o type=docker -t $IMAGE_REF;

    - name: System tests
      run: >
        export MODUS_EXECUTABLE=$PWD/debug-build/modus MODUS_BUILDKIT_FRONTEND=$IMAGE_REF &&
        cd test && python -m unittest discover && cd ..

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      if: github.event_name != 'pull_request'
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and publish the rest of the images
      if: github.event_name != 'pull_request'
      run: |
        set -e;
        cd /tmp/frontend;
        docker buildx create --use;
        docker buildx build --platform linux/arm64,linux/amd64 . -t $IMAGE_REF --push;
